from PyQt5.QtWidgets import QMainWindow, QApplication,QTableWidgetItem
import sys
import psycopg2
from PyQt5.QtGui import QIntValidator,QDoubleValidator


from TelaInicial_ui import *
from TelaBuscarLivros_ui import *
from TelaAddLivro_ui import *


conexao = psycopg2.connect(host='localhost',
                                                database='Biblioteca',
                                                user='postgres',
                                                password='postgres')

cursor = conexao.cursor()
cursor.execute\
("CREATE TABLE IF NOT EXISTS livros\
(\
idlivros BIGSERIAL PRIMARY KEY,\
livro VARCHAR(100),\
autor VARCHAR(50),\
sexo_do_autor CHAR(1),\
ano_de_lacamento numeric(4,0),\
descricao VARCHAR(1000),\
preco MONEY,\
inativo boolean DEFAULT false\
)")
conexao.commit()
cursor.close()

class AddLivros(QMainWindow,Ui_TelaAddLivros) :
    def __init__(self,parent = None):   
        super().__init__(parent)
        super().setupUi(self)
        ano_de_lacamento = self.edtAno
        ano_de_lacamento.setValidator(QIntValidator())
        ano_de_lacamento.setMaxLength(4)
        preco = self.edtpreco
        preco.setValidator(QDoubleValidator())
        preco.setMaxLength(6)

        mylistCombobox = ["", "F","M"]
        self.comboBox.addItems(mylistCombobox)   
        self.comboBox.setStyleSheet("background-color: #A6A6A6;")
        self.btnaddlivro.clicked.connect(self.addLivros)
        
    def addLivros(self):
        Livro = self.edtLivro.text()
        if  not Livro:
           self.edtLivro.setStyleSheet("background-color: #FF232F;")
        if Livro:
            self.edtLivro.setStyleSheet("background-color: #FFFFFF;")
 
        autor= self.edtAutor.text()
        if not autor:
            self.edtAutor.setStyleSheet("background-color: #FF232F;")
        if autor:
            self.edtAutor.setStyleSheet("background-color: #FFFFFF;")
            
        ano_de_lacamento = self.edtAno.text()
        if not ano_de_lacamento:
            self.edtAno.setStyleSheet("background-color: #FF232F;")
        if ano_de_lacamento:
            self.edtAno.setStyleSheet("background-color: #FFFFFF;")

        preco = self.edtpreco.text()
        if not preco:
            self.edtpreco.setStyleSheet("background-color: #FF232F;")
        if preco:
            self.edtpreco.setStyleSheet("background-color: #FFFFFF;")
        
        sexo_do_autor = self.comboBox.currentText()
        if not  sexo_do_autor:
            self.comboBox.setStyleSheet("background-color: #FF232F;")    
        if sexo_do_autor:
            self.comboBox.setStyleSheet("background-color: #A6A6A6;")
            
        descricao = self.textEdit.toPlainText ()
        if not  descricao:
            self.textEdit.setStyleSheet("background-color: #FF232F;")
        if descricao:
           self.textEdit.setStyleSheet("background-color: #FFFFFF;") 
            
        if Livro and autor and sexo_do_autor and ano_de_lacamento and descricao and preco:
            cursor = conexao.cursor()
            cursor.execute(f"INSERT INTO livros\
                                    (livro, autor , sexo_do_autor, ano_de_lancamento, descricao, preco)\
                                    VALUES ('{Livro}','{autor}','{sexo_do_autor}',{ano_de_lacamento},'{descricao}',{preco});")
            conexao.commit()
            cursor.close()


class BuscarLivros(QMainWindow,Ui_pesquisalivros) :
    def __init__(self,parent = None):
        super().__init__(parent)
        super().setupUi(self)
        self.BtnBuscarLivros.clicked.connect(self.buscarLivros)
        
    def buscarLivros(self):
        autor = self.edtautor.text()
        codigoLivro = self.sbCodigo.text()
        livro = self.edtlivro.text()
        if not autor and not livro:
            if  codigoLivro == '0'  :
                cursor = conexao.cursor()
                cursor.execute(f"SELECT idlivros,livro,autor,preco \
                                        FROM livros \
                                        WHERE inativo = False\
                                        ORDER BY idlivros ASC")
                dadoslistados = cursor.fetchall()
                
                self.tblBuscalivros.clearContents()
                self.tblBuscalivros.setRowCount(len(dadoslistados))
                
                for linha, texto in enumerate(dadoslistados):
                    for coluna, data in enumerate(texto):
                        self.tblBuscalivros.setItem(linha,coluna,QTableWidgetItem(str(data)))
                        cursor.close()
            else:
                cursor = conexao.cursor()
                cursor.execute(f"SELECT id_livros,livro,autor,preco \
                                        FROM Livros \
                                        WHERE id_livros='{codigoLivro}' and  inativo =False\
                                        ORDER BY idlivros ASC")
                dadoslistados = cursor.fetchall()
                
                self.tblBuscalivros.clearContents()
                self.tblBuscalivros.setRowCount(len(dadoslistados))
                
                for linha, texto in enumerate(dadoslistados):
                    for coluna, data in enumerate(texto):
                        self.tblBuscalivros.setItem(linha,coluna,QTableWidgetItem(str(data)))
                        cursor.close()
        else:
            cursor = conexao.cursor()
            cursor.execute(f"SELECT id_livros,livro,autor,preco \
                                    FROM Livros \
                                    WHERE livro ILIKE '%{livro}%' AND autor ILIKE '%{autor}%' AND  inativo =False\
                                    ORDER BY idlivros ASC")
            dadoslistados = cursor.fetchall()
            
            self.tblBuscalivros.clearContents()
            self.tblBuscalivros.setRowCount(len(dadoslistados))
            
            for linha, texto in enumerate(dadoslistados):
                for coluna, data in enumerate(texto):
                    self.tblBuscalivros.setItem(linha,coluna,QTableWidgetItem(str(data)))
                    cursor.close()
            
            
            
            
class TelaInicial(QMainWindow,Ui_TelaPrinciapal) :
    def __init__(self,parent = None):
        super().__init__(parent)
        self.ui = Ui_TelaPrinciapal()
        self.ui.setupUi(self)
        self.ui.btnpesquisar.clicked.connect(self.entrar_telaBusacarLivros)
        self.ui.btnADDLivros.clicked.connect(self.entrar_addLivros)
        self.ui.btnSair.clicked.connect(self.sair_do_sistema)
        
    def sair_do_sistema(self):
        sys.exit(qt.exec_())
        
    def entrar_telaBusacarLivros(self):
        self.tela=BuscarLivros()
        self.tela.show()
        
    def entrar_addLivros(self):
        self.tela=AddLivros()
        self.tela.show()

if __name__ == '__main__':
    qt = QApplication(sys.argv)
    telainicial = TelaInicial()
    telainicial.show()
    qt.exec_()
    
